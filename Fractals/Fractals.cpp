
// SpaceInvaders_Game.cpp : This file contains the 'main' function. Program execution begins and ends there.
// Julien Merceron - 2023
// code generated by chatGPT
/*
ChatGPT Dec 15th 2022 Version
https://chat.openai.com/chat
*/
/*
SDL
https://github.com/libsdl-org/SDL/releases/tag/release-2.26.2
SDL2-devel-2.26.2-VC.zip
sdl/include
sdl/lib
wrt dlls, ...
... copy \SDL2\lib\x64\SDL2.dll to C:\Windows\System32
... and \SDL2\lib\x86\SDL2.dll to C:\Windows\SysWOW64. Voila
*/
/*
SDL Image
https://github.com/libsdl-org/SDL_image
TBC
*/
/*
create a CONSOLE APP on VC++
copy paste base code in c++ file
------
add include path to SDL in VC++ Directories
add lib path to SDL in VC++ Directories
add sdl2.lib in libs to link in Linker -> Input
change from console to windows in Linker -> System
*/
/*
PROMPT MODIFIERS
resolution_driven
add_comments
*/


/*
https://www.geeksforgeeks.org/fractals-in-cc/
*/


#include <iostream>
#include "sdl.h"
#include "SDL_render.h"
//#include "sdl_image.h"
#include <windows.h>
#include <vector>

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>


// Screen dimensions (as percentages of the actual screen dimensions)
#define SCREEN_WIDTH 800
#define SCREEN_HEIGHT 600
const int SCREEN_WIDTH_PERCENT = 80;
const int SCREEN_HEIGHT_PERCENT = 80;
int screen_width, screen_height;
int game_screen_width;
int game_screen_height;


#include <complex.h>

const int WIDTH = 800;
const int HEIGHT = 600;

#define START_POS   -0.5
#define START_ZOOM  (WIDTH * 0.25296875f)

#define BAIL_OUT        2.0
#define FLIPS           24

#define ZOOM_FACTOR     4

# define M_LN2          0.69314718055994530942  /* log_e 2 */

//#define complex _Dcomplex

void sdl_draw_mandelbrot(SDL_Window* window, SDL_Surface* surface, _Dcomplex center, double zoom)
{
    int f, x, y, n;
    int maxiter = (WIDTH / 2) * 0.049715909 * log10(zoom);
    _Dcomplex z, c;
    float C;
    static SDL_Rect rects[HEIGHT / FLIPS];

    fprintf(stderr, "zoom: %f\n", zoom);
    fprintf(stderr, "center point: %f %+fi\n", creal(center),
        cimag(center));
    fprintf(stderr, "iterations: %d\n", maxiter);

    SDL_LockSurface(surface);

    for (f = 0; f < FLIPS; f++)
    {
        for (y = f; y < HEIGHT; y += FLIPS)
        {
            for (x = 0; x < WIDTH; x++)
            {
                /* Get the complex point on gauss space to be calculated */
                z = c = { (creal(center) + (x - (WIDTH / 2)) / zoom),
                    (cimag(center) + (y - (HEIGHT / 2)) / zoom) };

#define X creal(z)
#define Y cimag(z)

                /* Check if point lies within the main cardiod or
                   in the period-2 buld */
                if ((pow(X - .25, 2) + pow(Y, 2)) * (pow(X, 2) + (X / 2) + pow(Y, 2) - .1875) < pow(Y, 2) / 4 ||
                    pow(X + 1, 2) + pow(Y, 2) < .0625)
                    n = maxiter;
                else
                    /* Applies the actual mandelbrot formula on that point */
                    for (n = 0; n <= maxiter && cabs(z) < BAIL_OUT; n++)
                        z = { creal(cpow(z, { 2,0 })) + creal(c),
                                cimag(cpow(z, { 2,0 })) + cimag(c) };

                C = n - log2f(logf(cabs(z)) / M_LN2);

                /* Paint the pixel calculated depending on the number
                   of iterations found */
                ((Uint32*)surface->pixels)[(y * surface->w) + x] = (n >= maxiter) ? 0 :
                    SDL_MapRGB(surface->format,
                        (1 + sin(C * 0.27 + 5)) * 127., (1 + cos(C * 0.85)) * 127., (1 + sin(C * 0.15)) * 127.);
            }
            rects[y / FLIPS].x = 0;
            rects[y / FLIPS].y = y;
            rects[y / FLIPS].w = WIDTH;
            rects[y / FLIPS].h = 1;
        }
        SDL_UnlockSurface(surface);
        SDL_UpdateWindowSurface(window);
    }



}



int APIENTRY WinMain(HINSTANCE hInst, HINSTANCE hInstPrev, PSTR cmdline, int cmdshow)
{

#if 0
    std::cout << "Hello World!\n";
    return 0;
#else
    // Initialize SDL
    if (SDL_Init(SDL_INIT_VIDEO) < 0)
    {
        std::cout << "SDL could not initialize! SDL_Error: " << SDL_GetError() << std::endl;
        return -1;
    }

    // Flag to track whether the window is in full screen mode
    bool fullScreen = false;

    // Get the actual screen dimensions
    SDL_DisplayMode displayMode;

    // SDL_GetCurrentDisplayMode(0, &screen_width, &screen_height);
    if (SDL_GetCurrentDisplayMode(0, &displayMode) == 0)
    {
        // Success! The current display mode is stored in the "displayMode" variable
        screen_width = displayMode.w;
        screen_height = displayMode.h;
        std::cout << "Success! The current display mode is stored in the displayMode variable, and we have " << screen_width << ", " << screen_height << std::endl;
    }
    else
    {
        // An error occurred. You can use SDL_GetError() to get the error message.
        std::cout << "An error occurred. You can use SDL_GetError() to get the error message" << std::endl;
        return -1;
    }

    // Calculate the dimensions of the game screen (as pixels)
//    game_screen_width = screen_width * SCREEN_WIDTH_PERCENT / 100;
//    game_screen_height = screen_height * SCREEN_HEIGHT_PERCENT / 100;
    // Override calculations
    game_screen_width = SCREEN_WIDTH;
    game_screen_height = SCREEN_HEIGHT;

    // Create the window
    SDL_Window* window = SDL_CreateWindow("Fractals", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, game_screen_width, game_screen_height, SDL_WINDOW_SHOWN | SDL_WINDOW_RESIZABLE);
    if (window == NULL)
    {
        std::cout << "Window could not be created! SDL_Error: " << SDL_GetError() << std::endl;
        return -1;
    }

    // Create the renderer
    SDL_Renderer* renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);
    if (renderer == NULL)
    {
        std::cout << "Renderer could not be created! SDL_Error: " << SDL_GetError() << std::endl;
        return -1;
    }

    // Create the surface
    SDL_Surface* surface = SDL_GetWindowSurface(window);

    // one time init for fractals 
    _Dcomplex center = { START_POS, 0.0 };
    double zoom = START_ZOOM;
    sdl_draw_mandelbrot(window, surface, center, zoom);


    // Set the frame rate
    const int FPS = 60;
    const int frameDelay = 1000 / FPS;

    // Game loop
    bool running = true;
    bool bReady_1 = 1;
    bool bReady_3 = 1;
    while (running)
    {
        // Handle input


        // Handle events
        SDL_Event event;
        while (SDL_PollEvent(&event))
        {
            if ((event.type == SDL_QUIT) || (event.key.keysym.sym == SDLK_ESCAPE))
            {
                running = false;
            }
            if (event.type == SDL_WINDOWEVENT)
            {
                if (event.window.event == SDL_WINDOWEVENT_RESIZED)
                {
                    // Handle window resized event
                    game_screen_width = event.window.data1;
                    game_screen_height = event.window.data2;
                    // Do something with newWidth and newHeight
                    center = { START_POS, 0.0 };
                    zoom = START_ZOOM;
                    sdl_draw_mandelbrot(window, surface, center, zoom);

                }
            }
            if (event.type == SDL_KEYDOWN && event.key.keysym.sym == SDLK_f)
            {
                // Toggle full screen mode
                fullScreen = !fullScreen;
                SDL_SetWindowFullscreen(window, fullScreen ? SDL_WINDOW_FULLSCREEN_DESKTOP : 0);
                center = { START_POS, 0.0 };
                zoom = START_ZOOM;
                sdl_draw_mandelbrot(window, surface, center, zoom);
            }
            if (event.type == SDL_KEYDOWN)
            {
                if (event.key.keysym.sym == SDLK_LEFT)
                {
                    // Do something 
                }
                else if (event.key.keysym.sym == SDLK_RIGHT)
                {
                    // Do something 
                }
                else if (event.key.keysym.sym == SDLK_SPACE) 
                {
                    // Do something 
                    center = { START_POS, 0.0 };
                    zoom = START_ZOOM;
                    sdl_draw_mandelbrot(window, surface, center, zoom);
                }
            }
            else if (event.type == SDL_KEYUP)
            {
                if (event.key.keysym.sym == SDLK_LEFT || event.key.keysym.sym == SDLK_RIGHT)
                {
                    // Do something 
                }
                else if (event.key.keysym.sym == SDLK_SPACE) 
                {
                    // Do something 
                }
            }
            else if (event.type == SDL_MOUSEBUTTONDOWN)
            {
                if ((event.button.button == 1) && (bReady_1))
                {
                    bReady_1 = 0;
                    zoom *= ZOOM_FACTOR;

                    // Handle mouse input
                    int mouseX, mouseY;
                    SDL_GetMouseState(&mouseX, &mouseY); // Get the mouse position
                    // Do something 
                    // XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                    // XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                    // XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                    // XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                    // XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                    // XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                    // XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

                    center = { creal(center) + (mouseX - (WIDTH / 2)) / zoom,
                                cimag(center) + (mouseY - (HEIGHT / 2)) / zoom };

                    sdl_draw_mandelbrot(window, surface, center, zoom);
                }                
                if ((event.button.button == 3) && (bReady_3))
                {
                    bReady_3 = 0;
                    zoom /= ZOOM_FACTOR;

                    // Handle mouse input
                    int mouseX, mouseY;
                    SDL_GetMouseState(&mouseX, &mouseY); // Get the mouse position
                    // Do something 
                    // XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                    // XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                    // XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                    // XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                    // XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                    // XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                    // XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

                    center = { creal(center) + (mouseX - (WIDTH / 2)) / zoom,
                                cimag(center) + (mouseY - (HEIGHT / 2)) / zoom };

                    sdl_draw_mandelbrot(window, surface, center, zoom);
                }
            }
            else if (event.type == SDL_MOUSEBUTTONUP)
            {
                if (event.button.button == 1)
                    bReady_1 = 1;
                else if (event.button.button == 3)
                    bReady_3 = 1;
            }
        }

        // Per Frame Update state
        // XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
        // XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
        // XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
        // XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX


        // Delay to achieve desired frame rate
        SDL_Delay(frameDelay);
    }

    // Clean up SDL
    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    SDL_Quit();

    return 0;
#endif
}




// Run program: Ctrl + F5 or Debug > Start Without Debugging menu
// Debug program: F5 or Debug > Start Debugging menu

// Tips for Getting Started: 
//   1. Use the Solution Explorer window to add/manage files
//   2. Use the Team Explorer window to connect to source control
//   3. Use the Output window to see build output and other messages
//   4. Use the Error List window to view errors
//   5. Go to Project > Add New Item to create new code files, or Project > Add Existing Item to add existing code files to the project
//   6. In the future, to open this project again, go to File > Open > Project and select the .sln file


